class NumArray{
    constructor (nums){
        this.prefixSum = [0] // stores the number starting at 0 
        for (let i = 0;i< nums.length;i++){
            this.prefixSum[i+1]= this.prefixSum[i]+nums[i] // add the current prefix to the next 
        }
    }
}

NumArray.prototype.sumRange = function(left, right) {
     return this.prefixSum[right+1]-this.prefixSum[left]; 
};

/** 
 * Your NumArray object will be instantiated and called as such:
 * var obj = new NumArray(nums)
 * var param_1 = obj.sumRange(left,right)
 */

//Question
Given an integer array nums, handle multiple queries of the following type:

Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
Example 1:
Input
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]
Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3

 //Approach (pointer?)
 //first find the calulation for the arrays 
 //0, 1 ,2 , 3, 4 , 5 (indices)
 //-2, 0, 3, -5, 2, -1 (example)
 // -2, -2, 1, -4, -2, -3 (adding up the indices)
 
 // Edge cases
 // What of pointer is pointed at 3,5?
    // need to have an if statment that says if left is pointing at 3 then need to subtract indices at 5 and 0,1,2,3
//What if pointer is at 0,5?
    //need to check if left value is less then 0 then ignore?
